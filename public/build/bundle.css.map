{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Component.svelte",
    "../../Editor.svelte",
    "../../Pick.svelte",
    "../../Track.svelte",
    "../../TrackGrid.svelte",
    "../../TrackGridAddress.svelte",
    "../../TrackGridFan.svelte",
    "../../TrackGridLibrary.svelte",
    "../../TrackItem.svelte",
    "../../TrackItemFan.svelte",
    "../../TrackItemLibrary.svelte"
  ],
  "sourcesContent": [
    "<svelte:options accessors/>\n\n<style global>\n@import 'filepond/dist/filepond.min.css';\n</style>\n\n<script>\nimport { onDestroy, afterUpdate } from 'svelte';\nimport * as FilePond from 'filepond';\n\nexport const registerPlugin = FilePond.registerPlugin;\n\n// is FilePond supported\nexport const isSupported = FilePond.supported();\n\n// filtered methods\nconst filteredMethods = [\n  'setOptions',\n  'on',\n  'off',\n  'onOnce',\n  'appendTo',\n  'insertAfter',\n  'insertBefore',\n  'isAttachedTo',\n  'replaceElement',\n  'restoreElement',\n  'destroy'\n];\n\n// private props, root element + active instance of FilePond\nlet root;\nlet instance;\n\n// base props for use on file input\nlet klass = undefined;\nexport { klass as class };\nexport let id = undefined;\nexport let name = undefined;\nexport let allowMultiple = undefined;\nexport let required = undefined;\nexport let captureMethod = undefined;\nexport let acceptedFileTypes = undefined;\n\n// placeholder fn for methods\nconst noop = () => {};\n\n// functions to call on this component (if it's initialised)\nexport let addFile = noop;\nexport let addFiles = noop;\nexport let browse = noop;\nexport let fireSync = noop;\nexport let getFile = noop;\nexport let getFiles = noop;\nexport let moveFile = noop;\nexport let prepareFile = noop;\nexport let prepareFiles = noop;\nexport let processFile = noop;\nexport let processFiles = noop;\nexport let removeFile = noop;\nexport let removeFiles = noop;\nexport let sort = noop;\n\n// this lifecycle method will handle updating and creating the FilePond instance\nafterUpdate(() => {\n    if (!isSupported) return;\n    if (!instance) {\n\n        // create instance\n        instance = FilePond.create(root, { ...$$props });\n\n        // Reference pond methods to FilePond component instance\n        addFile = instance.addFile;\n        addFiles = instance.addFiles;\n        removeFile = instance.removeFile;\n        removeFiles = instance.removeFiles;\n        browse = instance.browse;\n        fireSync = instance.fireSync;\n        getFile = instance.getFile;\n        getFiles = instance.getFiles;\n        moveFile = instance.moveFile;\n        prepareFile = instance.prepareFile;\n        prepareFiles = instance.prepareFiles;\n        processFile = instance.processFile;\n        processFiles = instance.processFiles;\n        removeFile = instance.removeFile;\n        removeFiles = instance.removeFiles;\n        sort = instance.sort;\n\n    }\n    else {\n        instance.setOptions($$props);\n    }\n});\n\n// cleans up the component\nonDestroy(() => {\n    if (!instance) return;\n    instance.destroy();\n    instance = undefined;\n})\n</script>\n\n<div class=\"filepond--wrapper\">\n    <input type=\"file\" \n        bind:this={root}\n        {id}\n        {name}\n        class={klass}\n        accept={acceptedFileTypes}\n        multiple={allowMultiple}\n        required={required}\n        capture={captureMethod}>\n</div>",
    "<script>\n  import { arweave } from \"./arweave.js\";\n  import Community from \"community-js\";\n  import { publish } from \"./track.js\";\n  import { onMount } from \"svelte\";\n  import { documentTitle } from \"./helpers.js\";\n  import { quill } from \"svelte-quill\";\n  import {\n    editGenres,\n    editLocations,\n    editBadges,\n    editLicenses,\n    editBootlegs,\n    editTips,\n    editPayments,\n  } from \"./populate.js\";\n  import { CONTRACTID } from \"./constants.js\";\n  import FilePond, { registerPlugin, supported } from \"svelte-filepond\";\n  import FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\n  import FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\n  import FilePondPluginFileValidateType from \"filepond-plugin-file-validate-type\";\n  import FilePondPluginFileEncode from \"filepond-plugin-file-encode\";\n  import FilePondPluginFileValidateSize from \"filepond-plugin-file-validate-size\";\n  import FilePondPluginImageValidateSize from \"filepond-plugin-image-validate-size\";\n  export let wallet;\n  export let address;\n  let enablePreview = false;\n  let options = {\n    modules: {\n      toolbar: [\n        [{ header: [1, 2, 3, 4, 5, 6] }],\n        [\"bold\", \"italic\", \"underline\", \"strike\"],\n        [\"blockquote\", \"code-block\", \"link\", \"image\", \"video\"],\n        [{ list: \"ordered\" }, { list: \"bullet\" }],\n        [{ script: \"sub\" }, { script: \"super\" }],\n        [{ color: [] }, { background: [] }],\n        [\"clean\"],\n      ],\n    },\n    placeholder: \"Start to write about your track...\",\n    theme: \"snow\",\n  };\n  let trackContent = {\n    html: \"More info about your track\",\n    text: \"More info about your track\",\n  };\n  let genreEdited;\n  let locationEdited;\n  let badgeEdited;\n  let licenseEdited;\n  let bootlegEdited;\n  let tipEdited;\n  let paymentEdited;\n  let pstRecipient;\n  let pstFeeSubmissionRecipient = 0.0;\n  let pstFeeRecipient = 0.002;\n  let pstFeaturedPremium = 2.0;\n  function handleEditedGenre() {\n    genre = genreEdited.text;\n  }\n  function handleEditedLocation() {\n    location = locationEdited.text;\n  }\n  function handleEditedBadge() {\n    badge = badgeEdited.text;\n  }\n  function handleEditedLicense() {\n    license = licenseEdited.text;\n  }\n  function handleEditedBootleg() {\n    bootlegAvailable = bootlegEdited.text;\n  }\n  function handleEditedTip() {\n    tip = tipEdited.text;\n  }\n  function handleEditedPayment() {\n    payment = paymentEdited.text;\n  }\n  let id = \"\";\n  let imageUrl = \"\";\n  let musicData = \"\";\n  let imageData = \"\";\n  let musicUrl = \"\";\n  let title = \"\";\n  let artist = \"\";\n  let payment = \"Wallet\";\n  let contractwallet = \"\";\n  let genre = \"Acoustic\";\n  let location = \"Africa\";\n  let badge = \"New\";\n  let bootlegAvailable = \"Accepted\";\n  let tip = \"0.25\";\n  let license = \"All rights reserved\";\n  let status = \"Published\";\n  let apiVersion = \"1\";\n  let contentType = \"\";\n  let musicDataUrl = \"\";\n  let imageDataUrl = \"\";\n  function dataUrlToIntArray(dataUrl) {\n    var byteString = atob(dataUrl.split(\",\")[1]);\n    var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    return ia;\n  }\n  function handleAddMusic(error, fileItem) {\n    contentType = fileItem.fileExtension;\n    if (contentType == \"mp3\") {\n      contentType = \"audio/mpeg\";\n    } else {\n      contentType = \"audio/wav\";\n    }\n    musicDataUrl = fileItem.getFileEncodeDataURL();\n    musicData = dataUrlToIntArray(musicDataUrl);\n    if (fileItem) {\n    }\n  }\n  function handleAddImage(error, fileItem) {\n    contentType = fileItem.fileExtension;\n    if (contentType == \"png\") {\n      contentType = \"image/png\";\n    } else {\n      contentType = \"image/jpeg\";\n    }\n    imageDataUrl = fileItem.getFileEncodeDataURL();\n    imageData = dataUrlToIntArray(imageDataUrl);\n    if (fileItem) {\n    }\n  }\n  const submitAudio = async (error, fileItem) => {\n    handleAddMusic(error, fileItem);\n    if (!wallet || !address) {\n      return;\n    }\n    const client = new Arweave({\n      host: \"arweave.dev\",\n      port: 443,\n      protocol: \"https\",\n      timeout: 200000,\n    });\n    let community = new Community(client);\n    await community.setCommunityTx(CONTRACTID);\n    pstRecipient = await community.selectWeightedHolder();\n    let pstTx = await arweave.createTransaction(\n      {\n        target: pstRecipient,\n        quantity: arweave.ar.arToWinston(pstFeeRecipient),\n      },\n      wallet\n    );\n    await arweave.transactions.sign(pstTx, wallet);\n    await arweave.transactions.post(pstTx);\n    const tx = await arweave.createTransaction({ data: musicData }, wallet);\n    tx.addTag(\"Content-Type\", contentType);\n    await arweave.transactions.sign(tx, wallet);\n    const txid = tx.id;\n    const res = await arweave.transactions.post(tx);\n    if (res.status === 200 || res.status === 202) {\n      musicUrl = \"https://arweave.net/\" + txid;\n    }\n  };\n  const submitCover = async (error, fileItem) => {\n    handleAddImage(error, fileItem);\n    if (!wallet || !address) {\n      return;\n    }\n    const client = new Arweave({\n      host: \"arweave.dev\",\n      port: 443,\n      protocol: \"https\",\n      timeout: 200000,\n    });\n    let community = new Community(client);\n    await community.setCommunityTx(CONTRACTID);\n    pstRecipient = await community.selectWeightedHolder();\n    let pstTx = await arweave.createTransaction(\n      {\n        target: pstRecipient,\n        quantity: arweave.ar.arToWinston(pstFeeRecipient),\n      },\n      wallet\n    );\n    await arweave.transactions.sign(pstTx, wallet);\n    await arweave.transactions.post(pstTx);\n    const tx = await arweave.createTransaction({ data: imageData }, wallet);\n    tx.addTag(\"Content-Type\", contentType);\n    await arweave.transactions.sign(tx, wallet);\n    const txid = tx.id;\n    const res = await arweave.transactions.post(tx);\n    if (res.status === 200 || res.status === 202) {\n      imageUrl = \"https://arweave.net/\" + txid;\n    }\n  };\n  const submitTrack = async () => {\n    if (!wallet || !address) {\n      return;\n    }\n    const client = new Arweave({\n      host: \"arweave.dev\",\n      port: 443,\n      protocol: \"https\",\n      timeout: 200000,\n    });\n    if (badge == \"Featured\") {\n      pstFeeSubmissionRecipient = pstFeeRecipient + pstFeaturedPremium;\n    }\n    let community = new Community(client);\n    await community.setCommunityTx(CONTRACTID);\n    pstRecipient = await community.selectWeightedHolder();\n    let pstTx = await arweave.createTransaction(\n      {\n        target: pstRecipient,\n        quantity: arweave.ar.arToWinston(pstFeeSubmissionRecipient),\n      },\n      wallet\n    );\n    await arweave.transactions.sign(pstTx, wallet);\n    await arweave.transactions.post(pstTx);\n    handleEditedGenre();\n    handleEditedLocation();\n    handleEditedBadge();\n    handleEditedLicense();\n    handleEditedBootleg();\n    handleEditedTip();\n    handleEditedPayment();\n    const tx = await publish(\n      {\n        id: id,\n        imageUrl: imageUrl,\n        musicUrl: musicUrl,\n        title: title,\n        author: address,\n        artist: artist,\n        genre: genre,\n        location: location,\n        badge: badge,\n        license: license,\n        bootlegAvailable: bootlegAvailable,\n        tip: tip,\n        payment: payment,\n        contractwallet: contractwallet,\n        status: status,\n        apiVersion: apiVersion,\n        content: trackContent.html,\n      },\n      wallet,\n      address\n    );\n    window.location.href = `#/track/${tx.id}`;\n  };\n  onMount(() => {\n    documentTitle(\"Editor\");\n  });\n  registerPlugin(\n    FilePondPluginImageExifOrientation,\n    FilePondPluginImagePreview,\n    FilePondPluginFileValidateType,\n    FilePondPluginFileEncode,\n    FilePondPluginFileValidateSize,\n    FilePondPluginImageValidateSize\n  );\n  let pond;\n  let name = \"filepond\";\n  function handleInit() {}\n</script>\n\n<style>\n  .editor {\n    font-size: 1rem;\n  }\n</style>\n\n<svelte:head>\n  <link href=\"https://cdn.quilljs.com/1.3.6/quill.snow.css\" rel=\"stylesheet\" />\n</svelte:head>\n<div class=\"py-6 antialiased text-gray-900 px-6\">\n  <div class=\"max-w-2xl mx-auto\">\n    <h1 class=\"content-center text-bold text-2xl w-full\">List Your Track</h1>\n    <form on:submit|preventDefault|once={submitTrack}>\n      <div class=\"block mt-6\">\n        <FilePond\n          bind:this={pond}\n          {name}\n          allowFileSizeValidation={true}\n          maxFileSize={200000000}\n          acceptedFileTypes={['audio/mpeg', 'audio/wav']}\n          labelIdle={'Drag & Drop your music track or <span class=\"filepond--label-action\"> Browse </span><br><i>- .mp3 or .wav, 200MB max -</i>'}\n          maxFiles={1}\n          allowMultiple={false}\n          oninit={handleInit}\n          onaddfile={submitAudio}\n          required={true} />\n      </div>\n      <div class=\"block mt-6\">\n        <FilePond\n          bind:this={pond}\n          {name}\n          allowFileSizeValidation={true}\n          maxFileSize={200000}\n          allowImageValidateSize={true}\n          imageValidateSizeMinWidth={512}\n          imageValidateSizeMaxWidth={512}\n          imageValidateSizeMinHeight={512}\n          imageValidateSizeMaxHeight={512}\n          imageValidateSizeLabelExpectedMinSize={'Minimum size is {minWidth} × {minHeight}'}\n          imageValidateSizeLabelExpectedMaxSize={'Maximum size is {maxWidth} × {maxHeight}'}\n          acceptedFileTypes={['image/png', 'image/jpeg']}\n          labelIdle={'Drag & Drop your art cover or <span class=\"filepond--label-action\"> Browse </span><br><i>- 512 pixels wide, 512 pixels tall, .png or .jpg,  200KB max -</i>'}\n          maxFiles={1}\n          allowMultiple={false}\n          oninit={handleInit}\n          onaddfile={submitCover}\n          required={true} />\n      </div>\n      <div class=\"mt-4 flex flex-wrap -mx-6\">\n        <div class=\"w-1/2 px-6\">\n          <label class=\"block\">\n            <span class=\"text-gray-900\">Title</span>\n            <input\n              type=\"text\"\n              name=\"title\"\n              class=\"form-input mt-1 block w-full text-gray-900 shadow\n                bg-gray-400 hover:border-gray-200 focus:bg-gray-300 border-none\"\n              required\n              on:input={(event) => (title = event.target.value)} />\n          </label>\n          <label class=\"block mt-4\" for=\"badge\">\n            <span class=\"text-gray-900\">Badge</span>\n            <div class=\"sm:flex lg:block lg:mx-0\">\n              <select\n                class=\"mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none\"\n                name=\"pricing\"\n                bind:value={badgeEdited}\n                on:blur={handleEditedBadge}>\n                {#each editBadges as editBadge}\n                  <option value={editBadge}>{editBadge.text}</option>\n                {/each}\n              </select>\n            </div>\n          </label>\n          <label class=\"block mt-4\" for=\"tipping\">\n            <span class=\"text-gray-900\">Tip (AR)</span>\n            <div class=\"sm:flex lg:block lg:mx-0\">\n              <select\n                class=\"mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none\"\n                name=\"pricing\"\n                bind:value={tipEdited}\n                on:blur={handleEditedTip}>\n                {#each editTips as editTip}\n                  <option value={editTip}>{editTip.text}</option>\n                {/each}\n              </select>\n            </div>\n          </label>\n          <label class=\"block mt-4\" for=\"payment\">\n            <span class=\"text-gray-900\">Payment method</span>\n            <div class=\"sm:flex lg:block lg:mx-0\">\n              <select\n                class=\"mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none\"\n                name=\"license\"\n                bind:value={paymentEdited}\n                on:blur={handleEditedPayment}>\n                {#each editPayments as editPayment}\n                  <option value={editPayment}>{editPayment.text}</option>\n                {/each}\n              </select>\n            </div>\n          </label>\n          <label class=\"block mt-4\">\n            <span class=\"text-gray-900\">Wallet / PSC</span>\n            <input\n              type=\"text\"\n              name=\"contractwallet\"\n              class=\"form-input mt-1 block w-full text-gray-900 shadow\n                bg-gray-400 hover:border-gray-200 focus:bg-gray-300 border-none\"\n              required\n              on:input={(event) => (contractwallet = event.target.value)} />\n          </label>\n        </div>\n        <div class=\"w-1/2 px-6\">\n          <label class=\"block\">\n            <span class=\"text-gray-900\">Artist</span>\n            <input\n              type=\"text\"\n              name=\"artist\"\n              class=\"form-input mt-1 block w-full text-gray-900 shadow\n                bg-gray-400 hover:border-gray-200 focus:bg-gray-300 border-none\"\n              required\n              on:input={(event) => (artist = event.target.value)} />\n          </label>\n          <label class=\"block mt-4\" for=\"genre\">\n            <span class=\"text-gray-900\">Genre</span>\n            <div class=\"sm:flex lg:block lg:mx-0\">\n              <select\n                class=\"mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none mr-2\"\n                name=\"genre\"\n                bind:value={genreEdited}\n                on:blur={handleEditedGenre}>\n                {#each editGenres as editGenre}\n                  <option value={editGenre}>{editGenre.text}</option>\n                {/each}\n              </select>\n            </div>\n          </label>\n          <label class=\"block mt-4\" for=\"location\">\n            <span class=\"text-gray-900\">Location</span>\n            <div class=\"sm:flex lg:block lg:mx-0\">\n              <select\n                class=\"mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none mr-2\"\n                name=\"location\"\n                bind:value={locationEdited}\n                on:blur={handleEditedLocation}>\n                {#each editLocations as editLocation}\n                  <option value={editLocation}>{editLocation.text}</option>\n                {/each}\n              </select>\n            </div>\n          </label>\n          <label class=\"block mt-4\" for=\"license\">\n            <span class=\"text-gray-900\">License</span>\n            <div class=\"sm:flex lg:block lg:mx-0\">\n              <select\n                class=\"mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none\"\n                name=\"license\"\n                bind:value={licenseEdited}\n                on:blur={handleEditedLicense}>\n                {#each editLicenses as editLicense}\n                  <option value={editLicense}>{editLicense.text}</option>\n                {/each}\n              </select>\n            </div>\n          </label>\n          <label class=\"block mt-4\" for=\"bootleg\">\n            <span class=\"text-gray-900\">Bootlegs</span>\n            <div class=\"sm:flex lg:block lg:mx-0\">\n              <select\n                class=\"mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none\"\n                name=\"bootlegs\"\n                bind:value={bootlegEdited}\n                on:blur={handleEditedBootleg}>\n                {#each editBootlegs as editBootleg}\n                  <option value={editBootleg}>{editBootleg.text}</option>\n                {/each}\n              </select>\n            </div>\n          </label>\n        </div>\n      </div>\n      <div class=\"block mt-4\">\n        <span class=\"text-gray-900\">Rich Text Editor</span>\n      </div>\n      <div\n        class=\"mt-2 block w-full text-2xl text-gray-900 shadow bg-gray-400\n          hover:border-gray-200 focus:bg-gray-300 border-none\">\n        <div\n          class=\"editor\"\n          use:quill={options}\n          on:text-change={(e) => (trackContent = e.detail)} />\n        <br />\n      </div>\n      <div>\n        <label class=\"flex\">\n          <input\n            class=\"mt-3 form-checkbox h-5 w-5 block text-gray-900 bg-gray-400\n              hover:border-gray-200 focus:bg-gray-300 border-none\"\n            type=\"checkbox\"\n            name=\"preview\"\n            bind:checked={enablePreview} />\n          <span class=\"ml-2 mt-3\">Enable Preview HTML</span>\n        </label>\n        {#if enablePreview}\n          <div class=\"prose\">\n            {@html trackContent.html}\n          </div>\n        {/if}\n      </div>\n      <div class=\"mt-4 py-4 sm:text-right\">\n        <button\n          type=\"submit\"\n          aria-label=\"Publish\"\n          class=\"block w-full sm:w-auto sm:inline-block bg-orange-600\n            hover:bg-orange-500 font-semibold text-white px-6 py-2 rounded-lg\">\n          Publish\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n",
    "<script context=\"module\">\n  let current;\n</script>\n\n<script>\n  import { arweave, txTags, txOwner, txData } from \"./arweave.js\";\n  import Community from \"community-js\";\n  import { read } from \"./track.js\";\n  import { APP_NAME_TIPS, TIPS_FAN, CONTRACTID } from \"./constants.js\";\n  export let wallet;\n  export let address;\n  export let txid;\n  export let prevPage;\n  let feeDownload = 0.0;\n  let feeReferral = 0.0;\n  let referral = \"\";\n  let txidTrack = \"\";\n  txidTrack = txid.slice(0, 43);\n  referral = txid.slice(43);\n  let audio;\n  let paused = true;\n  $: render(txidTrack);\n  let track = {};\n  let title = \"\";\n  let artist = \"\";\n  let author = \"\";\n  $: artistRecipient = author;\n  let tip = \"\";\n  let payment = \"\";\n  let contractwallet = \"\";\n  let pstTokenizedTrack = \"\";\n  let genre = \"\";\n  let location = \"\";\n  let badge = \"\";\n  let license = \"\";\n  let bootlegAvailable = \"\";\n  let status = \"\";\n  let apiVersion = \"\";\n  let timestamp = \"\";\n  let imageUrl = \"\";\n  let musicUrl = \"\";\n  let content = \"\";\n  let pstRecipient;\n  let pstFeeRecipient = 0.0;\n  const render = async (txidTrack) => {\n    track = await read(txidTrack);\n    title = track[\"tags\"][\"Title\"];\n    artist = track[\"tags\"][\"Artist\"];\n    author = track[\"tags\"][\"Author\"];\n    musicUrl = track[\"tags\"][\"MusicUrl\"];\n    badge = track[\"tags\"][\"Badge\"];\n    tip = track[\"tags\"][\"Tip\"];\n    payment = track[\"tags\"][\"Payment\"];\n    contractwallet = track[\"tags\"][\"Contract\"];\n    genre = track[\"tags\"][\"Genre\"];\n    location = track[\"tags\"][\"Location\"];\n    license = track[\"tags\"][\"License\"];\n    bootlegAvailable = track[\"tags\"][\"Bootleg\"];\n    status = track[\"tags\"][\"Status\"];\n    apiVersion = track[\"tags\"][\"API\"];\n    timestamp = track[\"tags\"][\"Timestamp\"];\n    imageUrl = track[\"tags\"][\"ImageUrl\"];\n    content = track.data;\n  };\n  const submitDownload = async () => {\n    let tipDownload = parseFloat(tip);\n    pstFeeRecipient = tipDownload * 0.02;\n    feeReferral = tipDownload * 0.05;\n    feeDownload = tipDownload - pstFeeRecipient - feeReferral;\n    if (!wallet || !address) {\n      return;\n    }\n    if (payment == \"Wallet\") {\n      const client = new Arweave({\n        host: \"arweave.dev\",\n        port: 443,\n        protocol: \"https\",\n        timeout: 200000,\n      });\n      let community = new Community(client);\n      await community.setCommunityTx(CONTRACTID);\n      pstRecipient = await community.selectWeightedHolder();\n      let pstTx = await arweave.createTransaction(\n        {\n          target: pstRecipient,\n          quantity: arweave.ar.arToWinston(pstFeeRecipient),\n        },\n        wallet\n      );\n      await arweave.transactions.sign(pstTx, wallet);\n      await arweave.transactions.post(pstTx);\n      let pickTx = await arweave.createTransaction(\n        {\n          target: referral,\n          quantity: arweave.ar.arToWinston(feeReferral),\n        },\n        wallet\n      );\n      await arweave.transactions.sign(pickTx, wallet);\n      await arweave.transactions.post(pickTx);\n      let artistTx = await arweave.createTransaction(\n        {\n          target: contractwallet,\n          quantity: arweave.ar.arToWinston(feeDownload),\n        },\n        wallet\n      );\n      const tags = {\n        \"App-Name\": APP_NAME_TIPS,\n        TipsFan: TIPS_FAN + address,\n        Fan: address,\n        Track: txidTrack,\n        Title: title,\n        Artist: artist,\n        Genre: genre,\n        ImageUrl: imageUrl,\n        MusicUrl: musicUrl,\n      };\n      for (const [tagKey, tagValue] of Object.entries(tags)) {\n        artistTx.addTag(tagKey, tagValue);\n      }\n      await arweave.transactions.sign(artistTx, wallet);\n      await arweave.transactions.post(artistTx);\n      const clone = { ...artistTx };\n      clone[\"tags\"] = tags;\n      clone[\"data\"] = content;\n      clone[\"owner\"] = address;\n      window.localStorage.setItem(clone.id, JSON.stringify(clone));\n    } else {\n      const client = new Arweave({\n        host: \"arweave.dev\",\n        port: 443,\n        protocol: \"https\",\n        timeout: 200000,\n      });\n      let community = new Community(client);\n      await community.setCommunityTx(CONTRACTID);\n      pstRecipient = await community.selectWeightedHolder();\n      let pstTx = await arweave.createTransaction(\n        {\n          target: pstRecipient,\n          quantity: arweave.ar.arToWinston(pstFeeRecipient),\n        },\n        wallet\n      );\n      await arweave.transactions.sign(pstTx, wallet);\n      await arweave.transactions.post(pstTx);\n      let pickTx = await arweave.createTransaction(\n        {\n          target: referral,\n          quantity: arweave.ar.arToWinston(feeReferral),\n        },\n        wallet\n      );\n      await arweave.transactions.sign(pickTx, wallet);\n      await arweave.transactions.post(pickTx);\n      let trackCommunity = new Community(client);\n      await trackCommunity.setCommunityTx(CONTRACTID);\n      pstTokenizedTrack = await trackCommunity.selectWeightedHolder();\n      let artistTx = await arweave.createTransaction(\n        {\n          target: pstTokenizedTrack,\n          quantity: arweave.ar.arToWinston(tipDownload),\n        },\n        wallet\n      );\n      const tags = {\n        \"App-Name\": APP_NAME_TIPS,\n        TipsFan: TIPS_FAN + address,\n        Fan: address,\n        Track: txid,\n        Title: title,\n        Artist: artist,\n        Genre: genre,\n        ImageUrl: imageUrl,\n        MusicUrl: musicUrl,\n      };\n      for (const [tagKey, tagValue] of Object.entries(tags)) {\n        artistTx.addTag(tagKey, tagValue);\n      }\n      await arweave.transactions.sign(artistTx, wallet);\n      await arweave.transactions.post(artistTx);\n      const clone = { ...artistTx };\n      clone[\"tags\"] = tags;\n      clone[\"data\"] = \"\";\n      clone[\"owner\"] = address;\n      window.localStorage.setItem(clone.id, JSON.stringify(clone));\n    }\n    window.location.href = `#/library/${address}`;\n  };\n  function stopOthers() {\n    if (current && current !== audio) current.pause();\n    current = audio;\n  }\n</script>\n\n<style>\n  .email {\n    padding: 0 0 0 1em;\n    background: 0 50% no-repeat;\n    background-size: 1em 1em;\n    margin: 0 0 0.5em 0;\n    line-height: 1.2;\n    background-image: url(https://ghl62a64uierswzaztxoz3xiy572drcbqohmj7yjtsmwtk3sf6aa.arweave.net/MdftA9yiCRlbIMzu7O7ox3-hxEGDjsT_CZyZaatyL4A);\n  }\n  .aspect-16x9 {\n    padding-bottom: 56.25%;\n  }\n  audio {\n    width: 100%;\n    margin: 0.5em 0 0.5em 0;\n  }\n</style>\n\n<svelte:head>\n  <link href=\"//cdn.quilljs.com/1.3.6/quill.snow.css\" rel=\"stylesheet\" />\n</svelte:head>\n<div class=\"mt-8 flex\">\n  <div class=\"px-2 max-w-md mx-auto sm:max-w-lg lg:max-w-full lg:w-1/2 lg:px-5\">\n    <div class=\"xl:max-w-lg xl:ml_auto\">\n      <img\n        class=\"mt-6 rounded-lg shadow-xl sm:mt-8 sm:h-64 sm:w-full\n            sm:object-cover sm:object-center lg:hidden\"\n        src={imageUrl}\n        alt={title} />\n      <div class=\"relative px-4 -mt-10\">\n        <div\n          class=\"lg:hidden bg-white rounded-lg px-1 py-1 shadow-lg opacity-75\">\n          <audio\n            class=\"bg-white\"\n            bind:this={audio}\n            bind:paused\n            on:play={stopOthers}\n            controls\n            src={musicUrl}\n            controlsList=\"nodownload\" />\n        </div>\n      </div>\n      {#if badge == 'Featured'}\n        <div class=\"mt-10 text-gray-800 text-base font-semibold tracking-wide\">\n          <span\n            class=\"inline-block bg-orange-300 text-gray-800 text-xs px-2\n                rounded-md uppercase font-semibold tracking-wide\">\n            {badge}\n          </span>\n        </div>\n      {/if}\n      <h1\n        class=\"text-2xl font-bold text-gray-900 leading-tight sm:mt-2\n            sm:text-3xl md:mt-1 md:text-3xl lg:mt-4 lg:text-3xl xl:mt-4\n            xl:text-3xl truncate\">\n        {title}\n      </h1>\n      <h2\n        class=\"text-gray-600 text-xl font-normal sm:mt-2 sm:text-xl md:mt-1\n            md:text-xl lg:text-2xl xl:text-2xl truncate\">\n        <a\n          class=\"text-blue-900 underline hover:text-orange-600\"\n          href=\"#/artist/{author}\">\n          {artist}\n        </a>\n      </h2>\n      <div\n        class=\"mt-2 mb-2 text-gray-900 font-semibold text-base leading-tight\n            md:truncate\">\n        {genre}\n      </div>\n      <form on:submit|preventDefault={submitDownload}>\n        <div class=\"mt-3 lg:mt-2 sm:mt-6\">\n          <button\n            type=\"submit\"\n            aria-label=\"Tip Download Track\"\n            class=\"inline-block px-5 py-3 rounded-lg shadow-lg bg-orange-600\n                hover:bg-orange-500 text-white tracking-wider font-semibold\n                sm:text-base\">\n            Get Download tipping\n            {tip}\n            AR\n          </button>\n        </div>\n      </form>\n      <div\n        class=\"mt-1 mb-2 text-gray-900 font-light text-base leading-tight\n            md:truncate\">\n        {license}\n      </div>\n      <div class=\"sm:mt-4 email mb-4\">\n        <a\n          href=\"https://arweave.net/27WsYOcNHWweInDArUK94_GsBeuQKPXalsnwVPPRfe4?to={author}\"\n          target=\"_blank\"\n          rel=\"noopener\"\n          aria-label=\"Mail\"\n          class=\"text-base leading-tight rounded text-orange-600 font-light\n              hover:text-orange-600 sm:text-sm sm:px-2\">\n          Show us your love\n        </a>\n      </div>\n      <div class=\"mt-4\">\n        <a\n          href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\"\n          class=\"twitter-share-button\"\n          data-show-count=\"false\">Tweet</a>\n      </div>\n      <script\n        async\n        src=\"https://platform.twitter.com/widgets.js\"\n        charset=\"utf-8\">\n      </script>\n    </div>\n  </div>\n  <div class=\"hidden lg:block lg:w-1/2 lg:relative lg:mr-8\">\n    <img\n      class=\"absolute inset-0 h-64 w-full object-cover object-center\n          rounded-lg\"\n      src={imageUrl}\n      alt={title} />\n    <div class=\"relative px-4 -mt-2\">\n      <div class=\"mt-56 bg-white rounded-lg px-1 py-1 shadow-lg opacity-75\">\n        <audio\n          class=\"bg-white\"\n          bind:this={audio}\n          bind:paused\n          on:play={stopOthers}\n          controls\n          src={musicUrl}\n          controlsList=\"nodownload\" />\n      </div>\n    </div>\n  </div>\n</div>\n<div\n  class=\"mt-8 px-2 max-w-md mx-auto sm:max-w-xl lg:max-w-full lg:px-6\n      aspect-16x9\">\n  {@html content}\n</div>\n",
    "<script context=\"module\">\n  let current;\n</script>\n\n<script>\n  import { arweave, txTags, txOwner, txData } from \"./arweave.js\";\n  import Community from \"community-js\";\n  import { read } from \"./track.js\";\n  import { APP_NAME_TIPS, TIPS_FAN, CONTRACTID } from \"./constants.js\";\n  export let wallet;\n  export let address;\n  export let txid;\n  export let prevPage;\n  let audio;\n  let paused = true;\n  $: render(txid);\n  let track = {};\n  let title = \"\";\n  let artist = \"\";\n  let author = \"\";\n  $: artistRecipient = author;\n  let tip = \"\";\n  let payment = \"\";\n  let contractwallet = \"\";\n  let pstTokenizedTrack = \"\";\n  let genre = \"\";\n  let location = \"\";\n  let badge = \"\";\n  let license = \"\";\n  let bootlegAvailable = \"\";\n  let status = \"\";\n  let apiVersion = \"\";\n  let timestamp = \"\";\n  let imageUrl = \"\";\n  let musicUrl = \"\";\n  let content = \"\";\n  let pstRecipient;\n  let feeDownload = 0.0;\n  let pstFeeRecipient = 0.0;\n  const render = async (txid) => {\n    track = await read(txid);\n    title = track[\"tags\"][\"Title\"];\n    artist = track[\"tags\"][\"Artist\"];\n    author = track[\"tags\"][\"Author\"];\n    musicUrl = track[\"tags\"][\"MusicUrl\"];\n    badge = track[\"tags\"][\"Badge\"];\n    tip = track[\"tags\"][\"Tip\"];\n    payment = track[\"tags\"][\"Payment\"];\n    contractwallet = track[\"tags\"][\"Contract\"];\n    genre = track[\"tags\"][\"Genre\"];\n    location = track[\"tags\"][\"Location\"];\n    license = track[\"tags\"][\"License\"];\n    bootlegAvailable = track[\"tags\"][\"Bootleg\"];\n    status = track[\"tags\"][\"Status\"];\n    apiVersion = track[\"tags\"][\"API\"];\n    timestamp = track[\"tags\"][\"Timestamp\"];\n    imageUrl = track[\"tags\"][\"ImageUrl\"];\n    content = track.data;\n  };\n  const submitDownload = async () => {\n    let tipDownload = parseFloat(tip);\n    pstFeeRecipient = tipDownload * 0.02;\n    feeDownload = tipDownload - pstFeeRecipient;\n    if (!wallet || !address) {\n      return;\n    }\n    if (payment == \"Wallet\") {\n      const client = new Arweave({\n        host: \"arweave.dev\",\n        port: 443,\n        protocol: \"https\",\n        timeout: 200000,\n      });\n      let community = new Community(client);\n      await community.setCommunityTx(CONTRACTID);\n      pstRecipient = await community.selectWeightedHolder();\n      let pstTx = await arweave.createTransaction(\n        {\n          target: pstRecipient,\n          quantity: arweave.ar.arToWinston(pstFeeRecipient),\n        },\n        wallet\n      );\n      await arweave.transactions.sign(pstTx, wallet);\n      await arweave.transactions.post(pstTx);\n      let artistTx = await arweave.createTransaction(\n        {\n          target: contractwallet,\n          quantity: arweave.ar.arToWinston(feeDownload),\n        },\n        wallet\n      );\n      const tags = {\n        \"App-Name\": APP_NAME_TIPS,\n        TipsFan: TIPS_FAN + address,\n        Fan: address,\n        Track: txid,\n        Title: title,\n        Artist: artist,\n        Genre: genre,\n        ImageUrl: imageUrl,\n        MusicUrl: musicUrl,\n      };\n      for (const [tagKey, tagValue] of Object.entries(tags)) {\n        artistTx.addTag(tagKey, tagValue);\n      }\n      await arweave.transactions.sign(artistTx, wallet);\n      await arweave.transactions.post(artistTx);\n      const clone = { ...artistTx };\n      clone[\"tags\"] = tags;\n      clone[\"data\"] = content;\n      clone[\"owner\"] = address;\n      window.localStorage.setItem(clone.id, JSON.stringify(clone));\n    } else {\n      const client = new Arweave({\n        host: \"arweave.dev\",\n        port: 443,\n        protocol: \"https\",\n        timeout: 200000,\n      });\n      let community = new Community(client);\n      await community.setCommunityTx(CONTRACTID);\n      pstRecipient = await community.selectWeightedHolder();\n      let pstTx = await arweave.createTransaction(\n        {\n          target: pstRecipient,\n          quantity: arweave.ar.arToWinston(pstFeeRecipient),\n        },\n        wallet\n      );\n      await arweave.transactions.sign(pstTx, wallet);\n      await arweave.transactions.post(pstTx);\n      let trackCommunity = new Community(client);\n      await trackCommunity.setCommunityTx(CONTRACTID);\n      pstTokenizedTrack = await trackCommunity.selectWeightedHolder();\n      let artistTx = await arweave.createTransaction(\n        {\n          target: pstTokenizedTrack,\n          quantity: arweave.ar.arToWinston(tipDownload),\n        },\n        wallet\n      );\n      const tags = {\n        \"App-Name\": APP_NAME_TIPS,\n        TipsFan: TIPS_FAN + address,\n        Fan: address,\n        Track: txid,\n        Title: title,\n        Artist: artist,\n        Genre: genre,\n        ImageUrl: imageUrl,\n        MusicUrl: musicUrl,\n      };\n      for (const [tagKey, tagValue] of Object.entries(tags)) {\n        artistTx.addTag(tagKey, tagValue);\n      }\n      await arweave.transactions.sign(artistTx, wallet);\n      await arweave.transactions.post(artistTx);\n      const clone = { ...artistTx };\n      clone[\"tags\"] = tags;\n      clone[\"data\"] = \"\";\n      clone[\"owner\"] = address;\n      window.localStorage.setItem(clone.id, JSON.stringify(clone));\n    }\n    window.location.href = `#/library/${address}`;\n  };\n  function stopOthers() {\n    if (current && current !== audio) current.pause();\n    current = audio;\n  }\n</script>\n\n<style>\n  .email {\n    padding: 0 0 0 1em;\n    background: 0 50% no-repeat;\n    background-size: 1em 1em;\n    margin: 0 0 0.5em 0;\n    line-height: 1.2;\n    background-image: url(https://ghl62a64uierswzaztxoz3xiy572drcbqohmj7yjtsmwtk3sf6aa.arweave.net/MdftA9yiCRlbIMzu7O7ox3-hxEGDjsT_CZyZaatyL4A);\n  }\n  .aspect-16x9 {\n    padding-bottom: 56.25%;\n  }\n  audio {\n    width: 100%;\n    margin: 0.5em 0 0.5em 0;\n  }\n</style>\n\n<svelte:head>\n  <link href=\"//cdn.quilljs.com/1.3.6/quill.snow.css\" rel=\"stylesheet\" />\n</svelte:head>\n{#if prevPage == 'editor'}\n  <div class=\"px-6 py-12\">\n    <h3 class=\"px-6 py-6 flex justify-center text-gray-900 text-bold text-2xl\">\n      Your track will be public once the network confirmation is done\n    </h3>\n  </div>\n{:else}\n  <div class=\"mt-8 flex\">\n    <div\n      class=\"px-2 max-w-md mx-auto sm:max-w-lg lg:max-w-full lg:w-1/2 lg:px-5\">\n      <div class=\"xl:max-w-lg xl:ml_auto\">\n        <img\n          class=\"mt-6 rounded-lg shadow-xl sm:mt-8 sm:h-64 sm:w-full\n            sm:object-cover sm:object-center lg:hidden\"\n          src={imageUrl}\n          alt={title} />\n        <div class=\"relative px-4 -mt-10\">\n          <div\n            class=\"lg:hidden bg-white rounded-lg px-1 py-1 shadow-lg opacity-75\">\n            <audio\n              class=\"bg-white\"\n              bind:this={audio}\n              bind:paused\n              on:play={stopOthers}\n              controls\n              src={musicUrl}\n              controlsList=\"nodownload\" />\n          </div>\n        </div>\n        {#if badge == 'Featured'}\n          <div\n            class=\"mt-10 text-gray-800 text-base font-semibold tracking-wide\">\n            <span\n              class=\"inline-block bg-orange-300 text-gray-800 text-xs px-2\n                rounded-md uppercase font-semibold tracking-wide\">\n              {badge}\n            </span>\n          </div>\n        {/if}\n        <h1\n          class=\"text-2xl font-bold text-gray-900 leading-tight sm:mt-2\n            sm:text-3xl md:mt-1 md:text-3xl lg:mt-4 lg:text-3xl xl:mt-4\n            xl:text-3xl truncate\">\n          {title}\n        </h1>\n        <h2\n          class=\"text-gray-600 text-xl font-normal sm:mt-2 sm:text-xl md:mt-1\n            md:text-xl lg:text-2xl xl:text-2xl truncate\">\n          <a\n            class=\"text-blue-900 underline hover:text-orange-600\"\n            href=\"#/artist/{author}\">\n            {artist}\n          </a>\n        </h2>\n        <div\n          class=\"mt-2 mb-2 text-gray-900 font-semibold text-base leading-tight\n            md:truncate\">\n          {genre}\n        </div>\n        <form on:submit|preventDefault={submitDownload}>\n          <div class=\"mt-3 lg:mt-2 sm:mt-6\">\n            <button\n              type=\"submit\"\n              aria-label=\"Tip Download Track\"\n              class=\"inline-block px-5 py-3 rounded-lg shadow-lg bg-orange-600\n                hover:bg-orange-500 text-white tracking-wider font-semibold\n                sm:text-base\">\n              Get Download tipping\n              {tip}\n              AR\n            </button>\n          </div>\n        </form>\n        <div\n          class=\"mt-1 mb-2 text-gray-900 font-light text-base leading-tight\n            md:truncate\">\n          {license}\n        </div>\n        <div class=\"sm:mt-4 email mb-4\">\n          <a\n            href=\"https://arweave.net/27WsYOcNHWweInDArUK94_GsBeuQKPXalsnwVPPRfe4?to={author}\"\n            target=\"_blank\"\n            rel=\"noopener\"\n            aria-label=\"Mail\"\n            class=\"text-base leading-tight rounded text-orange-600 font-light\n              hover:text-orange-600 sm:text-sm sm:px-2\">\n            Show us your love\n          </a>\n        </div>\n        <div class=\"mt-4\">\n          <a\n            href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\"\n            class=\"twitter-share-button\"\n            data-show-count=\"false\">Tweet</a>\n        </div>\n        <script\n          async\n          src=\"https://platform.twitter.com/widgets.js\"\n          charset=\"utf-8\">\n        </script>\n      </div>\n    </div>\n    <div class=\"hidden lg:block lg:w-1/2 lg:relative lg:mr-8\">\n      <img\n        class=\"absolute inset-0 h-64 w-full object-cover object-center\n          rounded-lg\"\n        src={imageUrl}\n        alt={title} />\n      <div class=\"relative px-4 -mt-2\">\n        <div class=\"mt-56 bg-white rounded-lg px-1 py-1 shadow-lg opacity-75\">\n          <audio\n            class=\"bg-white\"\n            bind:this={audio}\n            bind:paused\n            on:play={stopOthers}\n            controls\n            src={musicUrl}\n            controlsList=\"nodownload\" />\n        </div>\n      </div>\n    </div>\n  </div>\n  <div\n    class=\"mt-8 px-2 max-w-md mx-auto sm:max-w-xl lg:max-w-full lg:px-6\n      aspect-16x9\">\n    {@html content}\n  </div>\n{/if}\n",
    "<script>\n  import TrackItem from \"./TrackItem.svelte\";\n  import {\n    searchStore,\n    genresStore,\n    badgesStore,\n    locationsStore,\n    bootlegsStore,\n  } from \"./stores.js\";\n  export let tracksStore;\n  import { onMount } from \"svelte\";\n  import { tracksByApp } from \"./tracks.js\";\n  let tracksSearch = [];\n  let resultsSearch = [];\n  let resultsFilter = [1];\n  let filtersEnded = false;\n  $: noFiltersApply = resultsFilter.length;\n  $: resultsFilter = tracksSearch.filter((trackSearch) => {\n    const genre = trackSearch.tags[\"Genre\"];\n    const location = trackSearch.tags[\"Location\"];\n    const badge = trackSearch.tags[\"Badge\"];\n    const bootlegAvailable = trackSearch.tags[\"Bootleg\"];\n    if ($genresStore == \"All\") {\n      if ($locationsStore == \"All\") {\n        if ($badgesStore == \"All\") {\n          if ($bootlegsStore == \"All\") {\n            filtersEnded = true;\n            return \"All\";\n          } else {\n            filtersEnded = true;\n            return bootlegAvailable.includes($bootlegsStore);\n          }\n        } else {\n          if ($bootlegsStore == \"All\") {\n            filtersEnded = true;\n            return badge.includes($badgesStore);\n          } else {\n            filtersEnded = true;\n            return (\n              badge.includes($badgesStore) &&\n              bootlegAvailable.includes($bootlegsStore)\n            );\n          }\n        }\n      } else {\n        if ($badgesStore == \"All\") {\n          if ($bootlegsStore == \"All\") {\n            filtersEnded = true;\n            return location.includes($locationsStore);\n          } else {\n            filtersEnded = true;\n            return (\n              location.includes($locationsStore) &&\n              bootlegAvailable.includes($bootlegsStore)\n            );\n          }\n        } else {\n          if ($bootlegsStore == \"All\") {\n            filtersEnded = true;\n            return (\n              location.includes($locationsStore) && badge.includes($badgesStore)\n            );\n          } else {\n            filtersEnded = true;\n            return (\n              location.includes($locationsStore) &&\n              badge.includes($badgesStore) &&\n              bootlegAvailable.includes($bootlegsStore)\n            );\n          }\n        }\n      }\n    } else {\n      if ($locationsStore == \"All\") {\n        if ($badgesStore == \"All\") {\n          if ($bootlegsStore == \"All\") {\n            filtersEnded = true;\n            return genre.includes($genresStore);\n          } else {\n            filtersEnded = true;\n            return (\n              genre.includes($genresStore) &&\n              bootlegAvailable.includes($bootlegsStore)\n            );\n          }\n        } else {\n          if ($bootlegsStore == \"All\") {\n            filtersEnded = true;\n            return (\n              genre.includes($bootlegsStore) && badge.includes($badgesStore)\n            );\n          } else {\n            filtersEnded = true;\n            return (\n              genre.includes($genresStore) &&\n              badge.includes($badgesStore) &&\n              bootlegAvailable.includes($bootlegsStore)\n            );\n          }\n        }\n      } else {\n        if ($badgesStore == \"All\") {\n          if ($bootlegsStore == \"All\") {\n            filtersEnded = true;\n            return (\n              genre.includes($genresStore) && location.includes($locationsStore)\n            );\n          } else {\n            filtersEnded = true;\n            return (\n              genre.includes($genresStore) &&\n              location.includes($locationsStore) &&\n              bootlegAvailable.includes($bootlegsStore)\n            );\n          }\n        } else {\n          if ($bootlegsStore == \"All\") {\n            filtersEnded = true;\n            return (\n              genre.includes($genresStore) &&\n              location.includes($locationsStore) &&\n              badge.includes($badgesStore)\n            );\n          } else {\n            filtersEnded = true;\n            return (\n              genre.includes($genresStore) &&\n              location.includes($locationsStore) &&\n              badge.includes($badgesStore) &&\n              bootlegAvailable.includes($bootlegsStore)\n            );\n          }\n        }\n      }\n    }\n  });\n  $: resultsSearch = tracksSearch.filter((trackSearch) => {\n    const title = trackSearch.tags[\"Title\"].toLowerCase();\n    const artist = trackSearch.tags[\"Artist\"].toLowerCase();\n    const content = trackSearch.data.toLowerCase();\n    return (\n      title.includes($searchStore) ||\n      artist.includes($searchStore) ||\n      content.includes($searchStore)\n    );\n  });\n  onMount(async () => {\n    tracksSearch = await tracksByApp();\n  });\n</script>\n\n<style>\n  section {\n    width: 100%;\n    display: grid;\n    grid-template-columns: repeat(1, 1fr);\n    grid-gap: 1rem;\n  }\n  @media (min-width: 640px) {\n    section {\n      grid-template-columns: repeat(2, 1fr);\n    }\n  }\n  @media (min-width: 768px) {\n    section {\n      grid-template-columns: repeat(3, 1fr);\n    }\n  }\n  @media (min-width: 1024px) {\n    section {\n      grid-template-columns: repeat(4, 1fr);\n    }\n  }\n  @media (min-width: 1280px) {\n    section {\n      grid-template-columns: repeat(5, 1fr);\n    }\n  }\n</style>\n\n{#if $searchStore == ''}\n  <h3 class=\"px-6 py-6 text-gray-900 text-bold text-2xl truncate\">\n    {#if $badgesStore == 'All' && $locationsStore == 'All' && $bootlegsStore != 'All' && $genresStore == 'All'}\n      Tracks with Bootlegs\n      {$bootlegsStore}\n    {:else if $badgesStore == 'All' && $locationsStore == 'All' && $bootlegsStore != 'All'}\n      {$genresStore}\n      Tracks with Bootlegs\n      {$bootlegsStore}\n    {:else if $badgesStore == 'All' && $locationsStore == 'All'}\n      {$genresStore}\n      Tracks\n    {:else if $genresStore == 'All' && $badgesStore == 'All' && $locationsStore != 'All'}\n      Tracks from\n      {$locationsStore}\n    {:else if $genresStore != 'All' && $badgesStore == 'All' && $locationsStore != 'All'}\n      {$genresStore}\n      Tracks from\n      {$locationsStore}\n    {:else if $genresStore == 'All' && $locationsStore == 'All' && $badgesStore != 'All'}\n      {$badgesStore}\n      Tracks\n    {:else if $genresStore == 'All' && $locationsStore != 'All' && $badgesStore != 'All'}\n      {$badgesStore}\n      Tracks from\n      {$locationsStore}\n    {:else}{$badgesStore} {$genresStore} Tracks from {$locationsStore}{/if}\n  </h3>\n  <section class=\"mt-2 px-6\">\n    {#each tracksStore as track}\n      {#if $genresStore == 'All'}\n        {#if $locationsStore == 'All'}\n          {#if $badgesStore == 'All'}\n            {#if $bootlegsStore == 'All'}\n              <TrackItem id={track.id} />\n            {:else if track.bootlegAvailable == $bootlegsStore}\n              <TrackItem id={track.id} />\n            {/if}\n          {:else if track.badge == $badgesStore}\n            {#if $bootlegsStore == 'All'}\n              <TrackItem id={track.id} />\n            {:else if track.bootlegAvailable == $bootlegsStore}\n              <TrackItem id={track.id} />\n            {/if}\n          {/if}\n        {:else if track.location == $locationsStore}\n          {#if $badgesStore == 'All'}\n            {#if $bootlegsStore == 'All'}\n              <TrackItem id={track.id} />\n            {:else if track.bootlegAvailable == $bootlegsStore}\n              <TrackItem id={track.id} />\n            {/if}\n          {:else if track.badge == $badgesStore}\n            {#if $bootlegsStore == 'All'}\n              <TrackItem id={track.id} />\n            {:else if track.bootlegAvailable == $bootlegsStore}\n              <TrackItem id={track.id} />\n            {/if}\n          {/if}\n        {/if}\n      {:else if track.genre == $genresStore}\n        {#if $locationsStore == 'All'}\n          {#if $badgesStore == 'All'}\n            {#if $bootlegsStore == 'All'}\n              <TrackItem id={track.id} />\n            {:else if track.bootlegAvailable == $bootlegsStore}\n              <TrackItem id={track.id} />\n            {/if}\n          {:else if track.badge == $badgesStore}\n            {#if $bootlegsStore == 'All'}\n              <TrackItem id={track.id} />\n            {:else if track.bootlegAvailable == $bootlegsStore}\n              <TrackItem id={track.id} />\n            {/if}\n          {/if}\n        {:else if track.location == $locationsStore}\n          {#if $badgesStore == 'All'}\n            {#if $bootlegsStore == 'All'}\n              <TrackItem id={track.id} />\n            {:else if track.bootlegAvailable == $bootlegsStore}\n              <TrackItem id={track.id} />\n            {/if}\n          {:else if track.badge == $badgesStore}\n            {#if $bootlegsStore == 'All'}\n              <TrackItem id={track.id} />\n            {:else if track.bootlegAvailable == $bootlegsStore}\n              <TrackItem id={track.id} />\n            {/if}\n          {/if}\n        {/if}\n      {/if}\n    {/each}\n  </section>\n  {#if filtersEnded && noFiltersApply == 0}\n    <h3\n      class=\"px-6 py-6 text-gray-900 text-bold text-xl md:text-xl lg:text-2xl\n        xl:text-2xl\">\n      Sorry, there are no tracks for these filters\n      <br />\n      Try filter for something else\n    </h3>\n  {/if}\n{:else}\n  {#if resultsSearch.length > 0}\n    <h3 class=\"px-6 py-6 text-gray-900 text-bold text-2xl\">\n      Search results for \"{$searchStore}\"\n    </h3>\n    <section class=\"mt-2 px-6\">\n      {#each tracksStore as track}\n        {#if track.title\n          .toLowerCase()\n          .includes(\n            $searchStore\n          ) || track.artist\n            .toLowerCase()\n            .includes(\n              $searchStore\n            ) || track.content.toLowerCase().includes($searchStore)}\n          <TrackItem id={track.id} />\n        {/if}\n      {/each}\n    </section>\n  {:else}\n    <h3\n      class=\"px-6 py-6 text-gray-900 text-bold text-2xl md:text-2xl lg:text-3xl\n        xl:text-3xl\">\n      Sorry, there are no tracks for \"{$searchStore}\"\n      <br />\n      Try searching for something else\n    </h3>\n  {/if}\n{/if}\n",
    "<script>\n  import TrackItem from \"./TrackItem.svelte\";\n  export let txid;\n  export let tracksByArtistStore;\n</script>\n\n<style>\n  section {\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-gap: 1rem;\n  }\n  @media (min-width: 640px) {\n    section {\n      grid-template-columns: repeat(1, 1fr);\n    }\n  }\n  @media (min-width: 768px) {\n    section {\n      grid-template-columns: repeat(3, 1fr);\n    }\n  }\n  @media (min-width: 1024px) {\n    section {\n      grid-template-columns: repeat(4, 1fr);\n    }\n  }\n  @media (min-width: 1280px) {\n    section {\n      grid-template-columns: repeat(5, 1fr);\n    }\n  }\n</style>\n\n<section class=\"mt-2 px-6\">\n  {#each tracksByArtistStore as track}\n    {#if track.author == txid}\n      <TrackItem id={track.id} />\n    {/if}\n  {/each}\n</section>\n",
    "<script>\n  import TrackItemFan from \"./TrackItemFan.svelte\";\n  export let txid;\n  export let myFansStore;\n</script>\n\n<style>\n  section {\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-gap: 1rem;\n  }\n  @media (min-width: 640px) {\n    section {\n      grid-template-columns: repeat(1, 1fr);\n    }\n  }\n  @media (min-width: 768px) {\n    section {\n      grid-template-columns: repeat(3, 1fr);\n    }\n  }\n  @media (min-width: 1024px) {\n    section {\n      grid-template-columns: repeat(4, 1fr);\n    }\n  }\n  @media (min-width: 1280px) {\n    section {\n      grid-template-columns: repeat(5, 1fr);\n    }\n  }\n</style>\n\n<h3 class=\"px-6 py-4 text-gray-900 text-bold text-2xl\">We Are Fans Of</h3>\n<section class=\"px-6\">\n  {#each myFansStore as weAreFansOf}\n    <TrackItemFan {txid} id={weAreFansOf.track} />\n  {/each}\n</section>\n",
    "<script>\n  import TrackItemLibrary from \"./TrackItemLibrary.svelte\";\n  // export let address;\n  export let myTipsStore;\n</script>\n\n<style>\n  section {\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-gap: 1rem;\n  }\n  @media (min-width: 640px) {\n    section {\n      grid-template-columns: repeat(1, 1fr);\n    }\n  }\n  @media (min-width: 768px) {\n    section {\n      grid-template-columns: repeat(3, 1fr);\n    }\n  }\n  @media (min-width: 1024px) {\n    section {\n      grid-template-columns: repeat(4, 1fr);\n    }\n  }\n  @media (min-width: 1280px) {\n    section {\n      grid-template-columns: repeat(5, 1fr);\n    }\n  }\n</style>\n\n<h3 class=\"px-6 py-6 text-gray-900 text-bold text-2xl\">My Library</h3>\n<section class=\"mt-2 px-6\">\n  {#each myTipsStore as myLibrary}\n    <TrackItemLibrary id={myLibrary.track} />\n  {/each}\n</section>\n",
    "<script context=\"module\">\n  let current;\n</script>\n\n<script>\n  import { read } from \"./track.js\";\n  export let id;\n  $: render(id);\n  let track = {};\n  let title;\n  let artist;\n  let tip;\n  let payment;\n  let contractwallet;\n  let genre;\n  let location;\n  let badge;\n  let author;\n  let license;\n  let bootlegAvailable;\n  let status;\n  let apiVersion;\n  let timestamp;\n  let imageUrl;\n  let musicUrl;\n  let content;\n  let audio;\n  let paused = true;\n  const render = async (id) => {\n    track = await read(id);\n    title = track[\"tags\"][\"Title\"];\n    artist = track[\"tags\"][\"Artist\"];\n    author = track[\"tags\"][\"Author\"];\n    musicUrl = track[\"tags\"][\"MusicUrl\"];\n    tip = track[\"tags\"][\"Tip\"];\n    payment = track[\"tags\"][\"Payment\"];\n    contractwallet = track[\"tags\"][\"Contract\"];\n    genre = track[\"tags\"][\"Genre\"];\n    badge = track[\"tags\"][\"Badge\"];\n    location = track[\"tags\"][\"Location\"];\n    license = track[\"tags\"][\"License\"];\n    bootlegAvailable = track[\"tags\"][\"Bootleg\"];\n    status = track[\"tags\"][\"Status\"];\n    apiVersion = track[\"tags\"][\"API\"];\n    timestamp = track[\"tags\"][\"Timestamp\"];\n    imageUrl = track[\"tags\"][\"ImageUrl\"];\n    content = track.data;\n  };\n  function stopOthers() {\n    if (current && current !== audio) current.pause();\n    current = audio;\n  }\n</script>\n\n<style>\n  audio {\n    width: 100%;\n    margin: 0.5em 0 0.5em 0;\n  }\n  .playing {\n    color: #dd6b20;\n  }\n</style>\n\n<div>\n  <div class=\"relative pb-5/6\">\n    <a href=\"#/track/{id}\" class=\"no-underline\">\n      <img\n        class=\"absolute inset-0 h-full w-full rounded-lg shadow-md object-cover\"\n        src={imageUrl}\n        alt={title} />\n    </a>\n  </div>\n  <div class=\"relative px-4 -mt-16\" class:playing={!paused}>\n    <div class=\"bg-white rounded-lg px-1 py-1 shadow-lg opacity-75\">\n      <audio\n        class=\"bg-white\"\n        bind:this={audio}\n        bind:paused\n        on:play={stopOthers}\n        controls\n        src={musicUrl}\n        controlsList=\"nodownload\" />\n      <div class=\"mt-1 font-semibold text-base leading-tight truncate\">\n        <a\n          href=\"#/track/{id}\"\n          class=\"no-underline hover:text-orange-600\">{title}</a>\n      </div>\n      <div\n        class=\"mt-1 text-gray-900 font-light text-base leading-tight truncate\">\n        <a href=\"#/artist/{author}\">{artist}</a>\n      </div>\n      <div class=\"flex\">\n        <div\n          class=\"w-3/5 mt-1 text-gray-900 font-light lowercase text-sm leading-tight\n          truncate\">\n          {genre}\n        </div>\n        <div class=\"w-2/5\">\n          {#if badge == 'Featured'}\n            <span\n              class=\" bg-orange-300 text-gray-800 text-xs px-2 inline-block\n                rounded-md font-semibold tracking-wide lowercase\">\n              {badge}\n            </span>\n          {/if}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
    "<script context=\"module\">\n  let current;\n</script>\n\n<script>\n  import { read } from \"./track.js\";\n  export let id;\n  export let txid;\n  $: render(id);\n  let track = {};\n  let title;\n  let artist;\n  let tip;\n  let payment;\n  let contractwallet;\n  let genre;\n  let location;\n  let badge;\n  let author;\n  let license;\n  let bootlegAvailable;\n  let status;\n  let apiVersion;\n  let timestamp;\n  let imageUrl;\n  let musicUrl;\n  let content;\n  let audio;\n  let paused = true;\n  const render = async (id) => {\n    track = await read(id);\n    title = track[\"tags\"][\"Title\"];\n    artist = track[\"tags\"][\"Artist\"];\n    author = track[\"tags\"][\"Author\"];\n    musicUrl = track[\"tags\"][\"MusicUrl\"];\n    tip = track[\"tags\"][\"Tip\"];\n    payment = track[\"tags\"][\"Payment\"];\n    contractwallet = track[\"tags\"][\"Contract\"];\n    genre = track[\"tags\"][\"Genre\"];\n    badge = track[\"tags\"][\"Badge\"];\n    location = track[\"tags\"][\"Location\"];\n    license = track[\"tags\"][\"License\"];\n    bootlegAvailable = track[\"tags\"][\"Bootleg\"];\n    status = track[\"tags\"][\"Status\"];\n    apiVersion = track[\"tags\"][\"API\"];\n    timestamp = track[\"tags\"][\"Timestamp\"];\n    imageUrl = track[\"tags\"][\"ImageUrl\"];\n    content = track.data;\n  };\n  function stopOthers() {\n    if (current && current !== audio) current.pause();\n    current = audio;\n  }\n</script>\n\n<style>\n  audio {\n    width: 100%;\n    margin: 0.5em 0 0.5em 0;\n  }\n  .playing {\n    color: #dd6b20;\n  }\n</style>\n\n<div>\n  <div class=\"relative pb-5/6\">\n    <a href=\"#/pick/{id}{txid}\" class=\"no-underline\">\n      <img\n        class=\"absolute inset-0 h-full w-full rounded-lg shadow-md object-cover\"\n        src={imageUrl}\n        alt={title} />\n    </a>\n  </div>\n  <div class=\"relative px-4 -mt-16\" class:playing={!paused}>\n    <div class=\"bg-white rounded-lg px-1 py-1 shadow-lg opacity-75\">\n      <audio\n        class=\"bg-white\"\n        bind:this={audio}\n        bind:paused\n        on:play={stopOthers}\n        controls\n        src={musicUrl}\n        controlsList=\"nodownload\" />\n      <div class=\"mt-1 font-semibold text-base leading-tight truncate\">\n        <a\n          href=\"#/pick/{id}{txid}\"\n          class=\"no-underline hover:text-orange-600\">{title}</a>\n      </div>\n      <div\n        class=\"mt-1 text-gray-900 font-light text-base leading-tight truncate\">\n        <a href=\"#/artist/{author}\">{artist}</a>\n      </div>\n      <div class=\"flex\">\n        <div\n          class=\"w-3/5 mt-1 text-gray-900 font-light lowercase text-sm leading-tight\n          truncate\">\n          {genre}\n        </div>\n        <div class=\"w-2/5\">\n          {#if badge == 'Featured'}\n            <span\n              class=\" bg-orange-300 text-gray-800 text-xs px-2 inline-block\n                rounded-md font-semibold tracking-wide lowercase\">\n              {badge}\n            </span>\n          {/if}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
    "<script context=\"module\">\n  let current;\n</script>\n\n<script>\n  import { read } from \"./track.js\";\n  export let id;\n  $: render(id);\n  let track = {};\n  let title;\n  let artist;\n  let tip;\n  let payment;\n  let contractwallet;\n  let genre;\n  let location;\n  let badge;\n  let author;\n  let license;\n  let bootlegAvailable;\n  let status;\n  let apiVersion;\n  let timestamp;\n  let imageUrl;\n  let musicUrl;\n  let content;\n  let audio;\n  let paused = true;\n  const render = async (id) => {\n    track = await read(id);\n    title = track[\"tags\"][\"Title\"];\n    artist = track[\"tags\"][\"Artist\"];\n    author = track[\"tags\"][\"Author\"];\n    musicUrl = track[\"tags\"][\"MusicUrl\"];\n    genre = track[\"tags\"][\"Genre\"];\n    imageUrl = track[\"tags\"][\"ImageUrl\"];\n  };\n  function stopOthers() {\n    if (current && current !== audio) current.pause();\n    current = audio;\n  }\n</script>\n\n<style>\n  audio {\n    width: 100%;\n    margin: 0.5em 0 0.5em 0;\n  }\n  .playing {\n    color: #dd6b20;\n  }\n</style>\n\n<div>\n  <div class=\"relative pb-5/6\">\n    <a href=\"#/track/{id}\" class=\"no-underline\">\n      <img\n        class=\"absolute inset-0 h-full w-full rounded-lg shadow-md object-cover\"\n        src={imageUrl}\n        alt={title} />\n    </a>\n  </div>\n  <div class=\"relative px-4 -mt-16\" class:playing={!paused}>\n    <div class=\"bg-white rounded-lg px-1 py-1 shadow-lg opacity-75\">\n      <audio\n        class=\"bg-white\"\n        bind:this={audio}\n        bind:paused\n        on:play={stopOthers}\n        controls\n        src={musicUrl}\n        controlsList=\"nodownload\" />\n      <div class=\"mt-1 font-semibold text-base leading-tight truncate\">\n        <a\n          href=\"#/track/{id}\"\n          class=\"no-underline hover:text-orange-600\">{title}</a>\n      </div>\n      <div\n        class=\"mt-1 text-gray-900 font-light text-base leading-tight truncate\">\n        <a href=\"#/artist/{author}\">{artist}</a>\n      </div>\n      <div\n        class=\"mt-1 text-orange-900 font-bold text-sm leading-tight\n          truncate\">\n        <a href={musicUrl}> download </a>\n      </div>\n    </div>\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}